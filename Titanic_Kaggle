{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#kütüphaneleri yükle\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:04.678094Z","iopub.execute_input":"2024-06-06T18:42:04.678534Z","iopub.status.idle":"2024-06-06T18:42:04.684413Z","shell.execute_reply.started":"2024-06-06T18:42:04.678491Z","shell.execute_reply":"2024-06-06T18:42:04.683264Z"},"trusted":true},"execution_count":185,"outputs":[]},{"cell_type":"code","source":"#veri dosyasını yükle\ndf_train=pd.read_csv('/kaggle/input/titanic/train.csv')\ndf_test=pd.read_csv('/kaggle/input/titanic/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:06.059770Z","iopub.execute_input":"2024-06-06T18:42:06.060851Z","iopub.status.idle":"2024-06-06T18:42:06.079874Z","shell.execute_reply.started":"2024-06-06T18:42:06.060811Z","shell.execute_reply":"2024-06-06T18:42:06.078707Z"},"trusted":true},"execution_count":186,"outputs":[]},{"cell_type":"code","source":"#veri ön işkeme ve EDA\ndf_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:07.300902Z","iopub.execute_input":"2024-06-06T18:42:07.301333Z","iopub.status.idle":"2024-06-06T18:42:07.321802Z","shell.execute_reply.started":"2024-06-06T18:42:07.301301Z","shell.execute_reply":"2024-06-06T18:42:07.320520Z"},"trusted":true},"execution_count":187,"outputs":[{"execution_count":187,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#eksik verileri\ndf_train.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:08.940815Z","iopub.execute_input":"2024-06-06T18:42:08.941243Z","iopub.status.idle":"2024-06-06T18:42:08.955163Z","shell.execute_reply.started":"2024-06-06T18:42:08.941207Z","shell.execute_reply":"2024-06-06T18:42:08.953909Z"},"trusted":true},"execution_count":188,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"#eksik veri kontrolu\ndf_train.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:10.468746Z","iopub.execute_input":"2024-06-06T18:42:10.469197Z","iopub.status.idle":"2024-06-06T18:42:10.480088Z","shell.execute_reply.started":"2024-06-06T18:42:10.469162Z","shell.execute_reply":"2024-06-06T18:42:10.478663Z"},"trusted":true},"execution_count":189,"outputs":[{"execution_count":189,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df_train.describe().T","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:12.317696Z","iopub.execute_input":"2024-06-06T18:42:12.318128Z","iopub.status.idle":"2024-06-06T18:42:12.355667Z","shell.execute_reply.started":"2024-06-06T18:42:12.318095Z","shell.execute_reply":"2024-06-06T18:42:12.354511Z"},"trusted":true},"execution_count":190,"outputs":[{"execution_count":190,"output_type":"execute_result","data":{"text/plain":"             count        mean         std   min       25%       50%    75%  \\\nPassengerId  891.0  446.000000  257.353842  1.00  223.5000  446.0000  668.5   \nSurvived     891.0    0.383838    0.486592  0.00    0.0000    0.0000    1.0   \nPclass       891.0    2.308642    0.836071  1.00    2.0000    3.0000    3.0   \nAge          714.0   29.699118   14.526497  0.42   20.1250   28.0000   38.0   \nSibSp        891.0    0.523008    1.102743  0.00    0.0000    0.0000    1.0   \nParch        891.0    0.381594    0.806057  0.00    0.0000    0.0000    0.0   \nFare         891.0   32.204208   49.693429  0.00    7.9104   14.4542   31.0   \n\n                  max  \nPassengerId  891.0000  \nSurvived       1.0000  \nPclass         3.0000  \nAge           80.0000  \nSibSp          8.0000  \nParch          6.0000  \nFare         512.3292  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>PassengerId</th>\n      <td>891.0</td>\n      <td>446.000000</td>\n      <td>257.353842</td>\n      <td>1.00</td>\n      <td>223.5000</td>\n      <td>446.0000</td>\n      <td>668.5</td>\n      <td>891.0000</td>\n    </tr>\n    <tr>\n      <th>Survived</th>\n      <td>891.0</td>\n      <td>0.383838</td>\n      <td>0.486592</td>\n      <td>0.00</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>1.0</td>\n      <td>1.0000</td>\n    </tr>\n    <tr>\n      <th>Pclass</th>\n      <td>891.0</td>\n      <td>2.308642</td>\n      <td>0.836071</td>\n      <td>1.00</td>\n      <td>2.0000</td>\n      <td>3.0000</td>\n      <td>3.0</td>\n      <td>3.0000</td>\n    </tr>\n    <tr>\n      <th>Age</th>\n      <td>714.0</td>\n      <td>29.699118</td>\n      <td>14.526497</td>\n      <td>0.42</td>\n      <td>20.1250</td>\n      <td>28.0000</td>\n      <td>38.0</td>\n      <td>80.0000</td>\n    </tr>\n    <tr>\n      <th>SibSp</th>\n      <td>891.0</td>\n      <td>0.523008</td>\n      <td>1.102743</td>\n      <td>0.00</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>1.0</td>\n      <td>8.0000</td>\n    </tr>\n    <tr>\n      <th>Parch</th>\n      <td>891.0</td>\n      <td>0.381594</td>\n      <td>0.806057</td>\n      <td>0.00</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>0.0</td>\n      <td>6.0000</td>\n    </tr>\n    <tr>\n      <th>Fare</th>\n      <td>891.0</td>\n      <td>32.204208</td>\n      <td>49.693429</td>\n      <td>0.00</td>\n      <td>7.9104</td>\n      <td>14.4542</td>\n      <td>31.0</td>\n      <td>512.3292</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#veri ön işleme işlemleri yapılacağı için teset ve train birleştirilir\ndf=pd.concat([df_train,df_test],ignore_index=True)\ndf","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:13.906460Z","iopub.execute_input":"2024-06-06T18:42:13.906910Z","iopub.status.idle":"2024-06-06T18:42:13.934741Z","shell.execute_reply.started":"2024-06-06T18:42:13.906876Z","shell.execute_reply":"2024-06-06T18:42:13.933482Z"},"trusted":true},"execution_count":191,"outputs":[{"execution_count":191,"output_type":"execute_result","data":{"text/plain":"      PassengerId  Survived  Pclass  \\\n0               1       0.0       3   \n1               2       1.0       1   \n2               3       1.0       3   \n3               4       1.0       1   \n4               5       0.0       3   \n...           ...       ...     ...   \n1304         1305       NaN       3   \n1305         1306       NaN       1   \n1306         1307       NaN       3   \n1307         1308       NaN       3   \n1308         1309       NaN       3   \n\n                                                   Name     Sex   Age  SibSp  \\\n0                               Braund, Mr. Owen Harris    male  22.0      1   \n1     Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                                Heikkinen, Miss. Laina  female  26.0      0   \n3          Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                              Allen, Mr. William Henry    male  35.0      0   \n...                                                 ...     ...   ...    ...   \n1304                                 Spector, Mr. Woolf    male   NaN      0   \n1305                       Oliva y Ocana, Dona. Fermina  female  39.0      0   \n1306                       Saether, Mr. Simon Sivertsen    male  38.5      0   \n1307                                Ware, Mr. Frederick    male   NaN      0   \n1308                           Peter, Master. Michael J    male   NaN      1   \n\n      Parch              Ticket      Fare Cabin Embarked  \n0         0           A/5 21171    7.2500   NaN        S  \n1         0            PC 17599   71.2833   C85        C  \n2         0    STON/O2. 3101282    7.9250   NaN        S  \n3         0              113803   53.1000  C123        S  \n4         0              373450    8.0500   NaN        S  \n...     ...                 ...       ...   ...      ...  \n1304      0           A.5. 3236    8.0500   NaN        S  \n1305      0            PC 17758  108.9000  C105        C  \n1306      0  SOTON/O.Q. 3101262    7.2500   NaN        S  \n1307      0              359309    8.0500   NaN        S  \n1308      1                2668   22.3583   NaN        C  \n\n[1309 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1304</th>\n      <td>1305</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>Spector, Mr. Woolf</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>A.5. 3236</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1305</th>\n      <td>1306</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>Oliva y Ocana, Dona. Fermina</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>PC 17758</td>\n      <td>108.9000</td>\n      <td>C105</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>1306</th>\n      <td>1307</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>Saether, Mr. Simon Sivertsen</td>\n      <td>male</td>\n      <td>38.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>SOTON/O.Q. 3101262</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1307</th>\n      <td>1308</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>Ware, Mr. Frederick</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>359309</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1308</th>\n      <td>1309</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>Peter, Master. Michael J</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2668</td>\n      <td>22.3583</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n<p>1309 rows × 12 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#numeric özellikler\nnumeric_columns=df.select_dtypes(include=['number'])\nnumeric_columns","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:16.493474Z","iopub.execute_input":"2024-06-06T18:42:16.493903Z","iopub.status.idle":"2024-06-06T18:42:16.515751Z","shell.execute_reply.started":"2024-06-06T18:42:16.493873Z","shell.execute_reply":"2024-06-06T18:42:16.514427Z"},"trusted":true},"execution_count":192,"outputs":[{"execution_count":192,"output_type":"execute_result","data":{"text/plain":"      PassengerId  Survived  Pclass   Age  SibSp  Parch      Fare\n0               1       0.0       3  22.0      1      0    7.2500\n1               2       1.0       1  38.0      1      0   71.2833\n2               3       1.0       3  26.0      0      0    7.9250\n3               4       1.0       1  35.0      1      0   53.1000\n4               5       0.0       3  35.0      0      0    8.0500\n...           ...       ...     ...   ...    ...    ...       ...\n1304         1305       NaN       3   NaN      0      0    8.0500\n1305         1306       NaN       1  39.0      0      0  108.9000\n1306         1307       NaN       3  38.5      0      0    7.2500\n1307         1308       NaN       3   NaN      0      0    8.0500\n1308         1309       NaN       3   NaN      1      1   22.3583\n\n[1309 rows x 7 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1304</th>\n      <td>1305</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n    </tr>\n    <tr>\n      <th>1305</th>\n      <td>1306</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>39.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>108.9000</td>\n    </tr>\n    <tr>\n      <th>1306</th>\n      <td>1307</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>38.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2500</td>\n    </tr>\n    <tr>\n      <th>1307</th>\n      <td>1308</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n    </tr>\n    <tr>\n      <th>1308</th>\n      <td>1309</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>1</td>\n      <td>22.3583</td>\n    </tr>\n  </tbody>\n</table>\n<p>1309 rows × 7 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#her çalışmada anlamlı çıkacak diye bir kural\nnumeric_columns.corr()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:18.165563Z","iopub.execute_input":"2024-06-06T18:42:18.166025Z","iopub.status.idle":"2024-06-06T18:42:18.184671Z","shell.execute_reply.started":"2024-06-06T18:42:18.165991Z","shell.execute_reply":"2024-06-06T18:42:18.183173Z"},"trusted":true},"execution_count":193,"outputs":[{"execution_count":193,"output_type":"execute_result","data":{"text/plain":"             PassengerId  Survived    Pclass       Age     SibSp     Parch  \\\nPassengerId     1.000000 -0.005007 -0.038354  0.028814 -0.055224  0.008942   \nSurvived       -0.005007  1.000000 -0.338481 -0.077221 -0.035322  0.081629   \nPclass         -0.038354 -0.338481  1.000000 -0.408106  0.060832  0.018322   \nAge             0.028814 -0.077221 -0.408106  1.000000 -0.243699 -0.150917   \nSibSp          -0.055224 -0.035322  0.060832 -0.243699  1.000000  0.373587   \nParch           0.008942  0.081629  0.018322 -0.150917  0.373587  1.000000   \nFare            0.031428  0.257307 -0.558629  0.178740  0.160238  0.221539   \n\n                 Fare  \nPassengerId  0.031428  \nSurvived     0.257307  \nPclass      -0.558629  \nAge          0.178740  \nSibSp        0.160238  \nParch        0.221539  \nFare         1.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>PassengerId</th>\n      <td>1.000000</td>\n      <td>-0.005007</td>\n      <td>-0.038354</td>\n      <td>0.028814</td>\n      <td>-0.055224</td>\n      <td>0.008942</td>\n      <td>0.031428</td>\n    </tr>\n    <tr>\n      <th>Survived</th>\n      <td>-0.005007</td>\n      <td>1.000000</td>\n      <td>-0.338481</td>\n      <td>-0.077221</td>\n      <td>-0.035322</td>\n      <td>0.081629</td>\n      <td>0.257307</td>\n    </tr>\n    <tr>\n      <th>Pclass</th>\n      <td>-0.038354</td>\n      <td>-0.338481</td>\n      <td>1.000000</td>\n      <td>-0.408106</td>\n      <td>0.060832</td>\n      <td>0.018322</td>\n      <td>-0.558629</td>\n    </tr>\n    <tr>\n      <th>Age</th>\n      <td>0.028814</td>\n      <td>-0.077221</td>\n      <td>-0.408106</td>\n      <td>1.000000</td>\n      <td>-0.243699</td>\n      <td>-0.150917</td>\n      <td>0.178740</td>\n    </tr>\n    <tr>\n      <th>SibSp</th>\n      <td>-0.055224</td>\n      <td>-0.035322</td>\n      <td>0.060832</td>\n      <td>-0.243699</td>\n      <td>1.000000</td>\n      <td>0.373587</td>\n      <td>0.160238</td>\n    </tr>\n    <tr>\n      <th>Parch</th>\n      <td>0.008942</td>\n      <td>0.081629</td>\n      <td>0.018322</td>\n      <td>-0.150917</td>\n      <td>0.373587</td>\n      <td>1.000000</td>\n      <td>0.221539</td>\n    </tr>\n    <tr>\n      <th>Fare</th>\n      <td>0.031428</td>\n      <td>0.257307</td>\n      <td>-0.558629</td>\n      <td>0.178740</td>\n      <td>0.160238</td>\n      <td>0.221539</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"sns.countplot(x='Pclass', hue='Survived', data=df_train)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:19.498437Z","iopub.execute_input":"2024-06-06T18:42:19.499413Z","iopub.status.idle":"2024-06-06T18:42:19.723003Z","shell.execute_reply.started":"2024-06-06T18:42:19.499367Z","shell.execute_reply":"2024-06-06T18:42:19.721790Z"},"trusted":true},"execution_count":194,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"sns.countplot(y='Pclass', hue='Survived', data=df_train)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:20.907151Z","iopub.execute_input":"2024-06-06T18:42:20.907629Z","iopub.status.idle":"2024-06-06T18:42:21.123623Z","shell.execute_reply.started":"2024-06-06T18:42:20.907566Z","shell.execute_reply":"2024-06-06T18:42:21.122334Z"},"trusted":true},"execution_count":195,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#Name sütunu\ndf['Name'].head()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:23.778794Z","iopub.execute_input":"2024-06-06T18:42:23.779212Z","iopub.status.idle":"2024-06-06T18:42:23.789415Z","shell.execute_reply.started":"2024-06-06T18:42:23.779183Z","shell.execute_reply":"2024-06-06T18:42:23.787974Z"},"trusted":true},"execution_count":196,"outputs":[{"execution_count":196,"output_type":"execute_result","data":{"text/plain":"0                              Braund, Mr. Owen Harris\n1    Cumings, Mrs. John Bradley (Florence Briggs Th...\n2                               Heikkinen, Miss. Laina\n3         Futrelle, Mrs. Jacques Heath (Lily May Peel)\n4                             Allen, Mr. William Henry\nName: Name, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"#Unvanlar\ndf['Title']=df['Name'].str.extract('([A-Za-z]+)\\.')","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:25.715241Z","iopub.execute_input":"2024-06-06T18:42:25.715652Z","iopub.status.idle":"2024-06-06T18:42:25.729104Z","shell.execute_reply.started":"2024-06-06T18:42:25.715623Z","shell.execute_reply":"2024-06-06T18:42:25.727822Z"},"trusted":true},"execution_count":197,"outputs":[]},{"cell_type":"code","source":"#hangi ünvanlar var\ndf['Title'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:26.834736Z","iopub.execute_input":"2024-06-06T18:42:26.835134Z","iopub.status.idle":"2024-06-06T18:42:26.845477Z","shell.execute_reply.started":"2024-06-06T18:42:26.835098Z","shell.execute_reply":"2024-06-06T18:42:26.844352Z"},"trusted":true},"execution_count":198,"outputs":[{"execution_count":198,"output_type":"execute_result","data":{"text/plain":"Title\nMr          757\nMiss        260\nMrs         197\nMaster       61\nRev           8\nDr            8\nCol           4\nMlle          2\nMajor         2\nMs            2\nLady          1\nSir           1\nMme           1\nDon           1\nCapt          1\nCountess      1\nJonkheer      1\nDona          1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"#Fransızca veya diğer dillerdeki ünvanları uygn şekilde çevirdik\ndf['Title']=df['Title'].replace(['Ms','Mlle'],'Miss')\ndf['Title']=df['Title'].replace(['Mme','Countess','Lady','Dona'],'Mrs')\ndf['Title']=df['Title'].replace(['Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer'],'Mr')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:42:29.192453Z","iopub.execute_input":"2024-06-06T18:42:29.192926Z","iopub.status.idle":"2024-06-06T18:42:29.208519Z","shell.execute_reply.started":"2024-06-06T18:42:29.192889Z","shell.execute_reply":"2024-06-06T18:42:29.207174Z"},"trusted":true},"execution_count":199,"outputs":[]},{"cell_type":"code","source":"df['Title'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:07.006838Z","iopub.execute_input":"2024-06-06T18:49:07.007347Z","iopub.status.idle":"2024-06-06T18:49:07.018475Z","shell.execute_reply.started":"2024-06-06T18:49:07.007309Z","shell.execute_reply":"2024-06-06T18:49:07.017149Z"},"trusted":true},"execution_count":200,"outputs":[{"execution_count":200,"output_type":"execute_result","data":{"text/plain":"Title\nMr        783\nMiss      264\nMrs       201\nMaster     61\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"#Embarked ekiks veiryi doldur\n#en çok tekrar eden değeri kullan\ndf['Embarked'].fillna(df['Embarked'].mode()[0],inplace=True) #df['Embarked'].mode()[0] birden fazla mod olabilir o yüzden ilkini al\ndf['Embarked'].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:09.445582Z","iopub.execute_input":"2024-06-06T18:49:09.445981Z","iopub.status.idle":"2024-06-06T18:49:09.457500Z","shell.execute_reply.started":"2024-06-06T18:49:09.445952Z","shell.execute_reply":"2024-06-06T18:49:09.456280Z"},"trusted":true},"execution_count":201,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/1664417435.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Embarked'].fillna(df['Embarked'].mode()[0],inplace=True) #df['Embarked'].mode()[0] birden fazla mod olabilir o yüzden ilkini al\n","output_type":"stream"},{"execution_count":201,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"code","source":"\ndf['Age'].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:13.277921Z","iopub.execute_input":"2024-06-06T18:49:13.278322Z","iopub.status.idle":"2024-06-06T18:49:13.287061Z","shell.execute_reply.started":"2024-06-06T18:49:13.278292Z","shell.execute_reply":"2024-06-06T18:49:13.285693Z"},"trusted":true},"execution_count":203,"outputs":[{"execution_count":203,"output_type":"execute_result","data":{"text/plain":"263"},"metadata":{}}]},{"cell_type":"code","source":"#Yaş değerlerini doldur\ndf['Age'].fillna(df.groupby('Title')['Age'].transform('mean'),inplace=True) # unvanların yaş ortalamalarına göre eksik yaşları doldur\ndf['Age'].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:23.177410Z","iopub.execute_input":"2024-06-06T18:49:23.178709Z","iopub.status.idle":"2024-06-06T18:49:23.197045Z","shell.execute_reply.started":"2024-06-06T18:49:23.178659Z","shell.execute_reply":"2024-06-06T18:49:23.195671Z"},"trusted":true},"execution_count":205,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/930110143.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Age'].fillna(df.groupby('Title')['Age'].transform('mean'),inplace=True) # unvanların yaş ortalamalarına göre eksik yaşları doldur\n","output_type":"stream"},{"execution_count":205,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:26.501184Z","iopub.execute_input":"2024-06-06T18:49:26.501624Z","iopub.status.idle":"2024-06-06T18:49:26.514977Z","shell.execute_reply.started":"2024-06-06T18:49:26.501575Z","shell.execute_reply":"2024-06-06T18:49:26.513639Z"},"trusted":true},"execution_count":206,"outputs":[{"execution_count":206,"output_type":"execute_result","data":{"text/plain":"PassengerId       0\nSurvived        418\nPclass            0\nName              0\nSex               0\nAge               0\nSibSp             0\nParch             0\nTicket            0\nFare              1\nCabin          1014\nEmbarked          0\nTitle             0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"#Bilet ücreti\ndf['Fare'].mean()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:28.605137Z","iopub.execute_input":"2024-06-06T18:49:28.605552Z","iopub.status.idle":"2024-06-06T18:49:28.613434Z","shell.execute_reply.started":"2024-06-06T18:49:28.605520Z","shell.execute_reply":"2024-06-06T18:49:28.612256Z"},"trusted":true},"execution_count":207,"outputs":[{"execution_count":207,"output_type":"execute_result","data":{"text/plain":"33.29547928134557"},"metadata":{}}]},{"cell_type":"code","source":"df['Fare'].median()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:29.556368Z","iopub.execute_input":"2024-06-06T18:49:29.556835Z","iopub.status.idle":"2024-06-06T18:49:29.567914Z","shell.execute_reply.started":"2024-06-06T18:49:29.556799Z","shell.execute_reply":"2024-06-06T18:49:29.565733Z"},"trusted":true},"execution_count":208,"outputs":[{"execution_count":208,"output_type":"execute_result","data":{"text/plain":"14.4542"},"metadata":{}}]},{"cell_type":"code","source":"df['Fare'].fillna(df['Fare'].median(),inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:30.548200Z","iopub.execute_input":"2024-06-06T18:49:30.548629Z","iopub.status.idle":"2024-06-06T18:49:30.556324Z","shell.execute_reply.started":"2024-06-06T18:49:30.548581Z","shell.execute_reply":"2024-06-06T18:49:30.555175Z"},"trusted":true},"execution_count":209,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/2541859169.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Fare'].fillna(df['Fare'].median(),inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:32.061182Z","iopub.execute_input":"2024-06-06T18:49:32.061614Z","iopub.status.idle":"2024-06-06T18:49:32.073095Z","shell.execute_reply.started":"2024-06-06T18:49:32.061566Z","shell.execute_reply":"2024-06-06T18:49:32.071686Z"},"trusted":true},"execution_count":210,"outputs":[{"execution_count":210,"output_type":"execute_result","data":{"text/plain":"PassengerId       0\nSurvived        418\nPclass            0\nName              0\nSex               0\nAge               0\nSibSp             0\nParch             0\nTicket            0\nFare              0\nCabin          1014\nEmbarked          0\nTitle             0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:34.358020Z","iopub.execute_input":"2024-06-06T18:49:34.358410Z","iopub.status.idle":"2024-06-06T18:49:34.370696Z","shell.execute_reply.started":"2024-06-06T18:49:34.358380Z","shell.execute_reply":"2024-06-06T18:49:34.369130Z"},"trusted":true},"execution_count":211,"outputs":[{"execution_count":211,"output_type":"execute_result","data":{"text/plain":"PassengerId       0\nSurvived        418\nPclass            0\nName              0\nSex               0\nAge               0\nSibSp             0\nParch             0\nTicket            0\nFare              0\nCabin          1014\nEmbarked          0\nTitle             0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"#özellikler hedef değişkenlerini belirle\ny=df['Survived']\nx=df.drop(['Survived','PassengerId','Name','Ticket','Cabin'],axis=1)\nx.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:35.542417Z","iopub.execute_input":"2024-06-06T18:49:35.542894Z","iopub.status.idle":"2024-06-06T18:49:35.566731Z","shell.execute_reply.started":"2024-06-06T18:49:35.542857Z","shell.execute_reply":"2024-06-06T18:49:35.565392Z"},"trusted":true},"execution_count":212,"outputs":[{"execution_count":212,"output_type":"execute_result","data":{"text/plain":"   Pclass     Sex   Age  SibSp  Parch     Fare Embarked Title\n0       3    male  22.0      1      0   7.2500        S    Mr\n1       1  female  38.0      1      0  71.2833        C   Mrs\n2       3  female  26.0      0      0   7.9250        S  Miss\n3       1  female  35.0      1      0  53.1000        S   Mrs\n4       3    male  35.0      0      0   8.0500        S    Mr","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>Mr</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>Miss</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>Mr</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:36.572495Z","iopub.execute_input":"2024-06-06T18:49:36.572935Z","iopub.status.idle":"2024-06-06T18:49:36.582736Z","shell.execute_reply.started":"2024-06-06T18:49:36.572901Z","shell.execute_reply":"2024-06-06T18:49:36.581483Z"},"trusted":true},"execution_count":213,"outputs":[{"execution_count":213,"output_type":"execute_result","data":{"text/plain":"0       0.0\n1       1.0\n2       1.0\n3       1.0\n4       0.0\n       ... \n1304    NaN\n1305    NaN\n1306    NaN\n1307    NaN\n1308    NaN\nName: Survived, Length: 1309, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"#Kategorik verileri sayısal verilere çevirir\n# One Hot Encoding\nx=pd.get_dummies(x,drop_first=True) #Feature Engineering - özellik mühendisliği\n#Pclass aslında sayısal bir veri değil önce dtype objeye çevir sonra dummies yapacağız","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:37.989138Z","iopub.execute_input":"2024-06-06T18:49:37.989545Z","iopub.status.idle":"2024-06-06T18:49:38.003404Z","shell.execute_reply.started":"2024-06-06T18:49:37.989514Z","shell.execute_reply":"2024-06-06T18:49:38.002015Z"},"trusted":true},"execution_count":214,"outputs":[]},{"cell_type":"code","source":"x","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:39.197172Z","iopub.execute_input":"2024-06-06T18:49:39.198250Z","iopub.status.idle":"2024-06-06T18:49:39.218870Z","shell.execute_reply.started":"2024-06-06T18:49:39.198210Z","shell.execute_reply":"2024-06-06T18:49:39.217630Z"},"trusted":true},"execution_count":215,"outputs":[{"execution_count":215,"output_type":"execute_result","data":{"text/plain":"      Pclass        Age  SibSp  Parch      Fare  Sex_male  Embarked_Q  \\\n0          3  22.000000      1      0    7.2500      True       False   \n1          1  38.000000      1      0   71.2833     False       False   \n2          3  26.000000      0      0    7.9250     False       False   \n3          1  35.000000      1      0   53.1000     False       False   \n4          3  35.000000      0      0    8.0500      True       False   \n...      ...        ...    ...    ...       ...       ...         ...   \n1304       3  32.811056      0      0    8.0500      True       False   \n1305       1  39.000000      0      0  108.9000     False       False   \n1306       3  38.500000      0      0    7.2500      True       False   \n1307       3  32.811056      0      0    8.0500      True       False   \n1308       3   5.482642      1      1   22.3583      True       False   \n\n      Embarked_S  Title_Miss  Title_Mr  Title_Mrs  \n0           True       False      True      False  \n1          False       False     False       True  \n2           True        True     False      False  \n3           True       False     False       True  \n4           True       False      True      False  \n...          ...         ...       ...        ...  \n1304        True       False      True      False  \n1305       False       False     False       True  \n1306        True       False      True      False  \n1307        True       False      True      False  \n1308       False       False     False      False  \n\n[1309 rows x 11 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Sex_male</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Title_Miss</th>\n      <th>Title_Mr</th>\n      <th>Title_Mrs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>22.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>35.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>35.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1304</th>\n      <td>3</td>\n      <td>32.811056</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1305</th>\n      <td>1</td>\n      <td>39.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>108.9000</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1306</th>\n      <td>3</td>\n      <td>38.500000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1307</th>\n      <td>3</td>\n      <td>32.811056</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1308</th>\n      <td>3</td>\n      <td>5.482642</td>\n      <td>1</td>\n      <td>1</td>\n      <td>22.3583</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>1309 rows × 11 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['Embarked'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:40.412624Z","iopub.execute_input":"2024-06-06T18:49:40.413040Z","iopub.status.idle":"2024-06-06T18:49:40.421308Z","shell.execute_reply.started":"2024-06-06T18:49:40.413010Z","shell.execute_reply":"2024-06-06T18:49:40.419901Z"},"trusted":true},"execution_count":216,"outputs":[{"execution_count":216,"output_type":"execute_result","data":{"text/plain":"array(['S', 'C', 'Q'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"#Train ve testi aşağıdaki gibi ayırıyoruz\nx_train=x[:891] #Train veri setinde ilk 891\nx_test=x[891:]\ny_train=y[:891]\ny_test=y[891:]","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:41.549109Z","iopub.execute_input":"2024-06-06T18:49:41.549526Z","iopub.status.idle":"2024-06-06T18:49:41.556331Z","shell.execute_reply.started":"2024-06-06T18:49:41.549492Z","shell.execute_reply":"2024-06-06T18:49:41.555005Z"},"trusted":true},"execution_count":217,"outputs":[]},{"cell_type":"code","source":"#tahminlerin gerçek değerleri bizden saklanır\ny_test","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:42.723701Z","iopub.execute_input":"2024-06-06T18:49:42.724089Z","iopub.status.idle":"2024-06-06T18:49:42.733476Z","shell.execute_reply.started":"2024-06-06T18:49:42.724063Z","shell.execute_reply":"2024-06-06T18:49:42.732046Z"},"trusted":true},"execution_count":218,"outputs":[{"execution_count":218,"output_type":"execute_result","data":{"text/plain":"891    NaN\n892    NaN\n893    NaN\n894    NaN\n895    NaN\n        ..\n1304   NaN\n1305   NaN\n1306   NaN\n1307   NaN\n1308   NaN\nName: Survived, Length: 418, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.model_selection import cross_val_score\n#accuaracy\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:45.246135Z","iopub.execute_input":"2024-06-06T18:49:45.246542Z","iopub.status.idle":"2024-06-06T18:49:45.255307Z","shell.execute_reply.started":"2024-06-06T18:49:45.246508Z","shell.execute_reply":"2024-06-06T18:49:45.253695Z"},"trusted":true},"execution_count":219,"outputs":[]},{"cell_type":"code","source":"def model_classification(X,y):\n    '''\n    X: independent variable\n    y: dependent variable\n    return best model and its accuracy\n    '''\n    x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)\n    models = [GaussianNB(),BernoulliNB(),LogisticRegression(),RandomForestClassifier(), \n              GradientBoostingClassifier(), KNeighborsClassifier(n_neighbors=5)]\n    results=[]\n    for model in models:\n        model.fit(x_train,y_train)\n        model_predict=model.predict(x_test)\n        print(\"Model: \",model)\n        print(\"Model Accuracy: \",accuracy_score(model_predict,y_test))\n        print(\"Model Confusion Matrix: \",confusion_matrix(model_predict,y_test),\"\\n\")\n        print(\"Model Classification Report: \",classification_report(model_predict,y_test))\n        print(\"-\"*50)\n        results.append(accuracy_score(model_predict,y_test))\n    #best model\n    best_model=models[results.index(max(results))]\n    print(\"Best Model: \",best_model)\n    print(\"Best Model Accuracy: \",max(results))\n    models=pd.DataFrame({\n        'Model':['GaussianNB','BernoulliNB','LogisticRegression','RandomForestClassifier', 'GradientBoostingClassifier', 'KNeighborsClassifier'],\n        'Score':results})\n    print(models.sort_values(by='Score', ascending=False, ignore_index=True))\n    return best_model,max(results), confusion_matrix(model_predict,y_test)","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:46.829914Z","iopub.execute_input":"2024-06-06T18:49:46.830303Z","iopub.status.idle":"2024-06-06T18:49:46.843316Z","shell.execute_reply.started":"2024-06-06T18:49:46.830274Z","shell.execute_reply":"2024-06-06T18:49:46.841668Z"},"trusted":true},"execution_count":220,"outputs":[]},{"cell_type":"code","source":"model_classification(x_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:47.932617Z","iopub.execute_input":"2024-06-06T18:49:47.933439Z","iopub.status.idle":"2024-06-06T18:49:48.534282Z","shell.execute_reply.started":"2024-06-06T18:49:47.933397Z","shell.execute_reply":"2024-06-06T18:49:48.533178Z"},"trusted":true},"execution_count":221,"outputs":[{"name":"stdout","text":"Model:  GaussianNB()\nModel Accuracy:  0.7947761194029851\nModel Confusion Matrix:  [[132  30]\n [ 25  81]] \n\nModel Classification Report:                precision    recall  f1-score   support\n\n         0.0       0.84      0.81      0.83       162\n         1.0       0.73      0.76      0.75       106\n\n    accuracy                           0.79       268\n   macro avg       0.79      0.79      0.79       268\nweighted avg       0.80      0.79      0.80       268\n\n--------------------------------------------------\nModel:  BernoulliNB()\nModel Accuracy:  0.7947761194029851\nModel Confusion Matrix:  [[134  32]\n [ 23  79]] \n\nModel Classification Report:                precision    recall  f1-score   support\n\n         0.0       0.85      0.81      0.83       166\n         1.0       0.71      0.77      0.74       102\n\n    accuracy                           0.79       268\n   macro avg       0.78      0.79      0.79       268\nweighted avg       0.80      0.79      0.80       268\n\n--------------------------------------------------\nModel:  LogisticRegression()\nModel Accuracy:  0.8171641791044776\nModel Confusion Matrix:  [[136  28]\n [ 21  83]] \n\nModel Classification Report:                precision    recall  f1-score   support\n\n         0.0       0.87      0.83      0.85       164\n         1.0       0.75      0.80      0.77       104\n\n    accuracy                           0.82       268\n   macro avg       0.81      0.81      0.81       268\nweighted avg       0.82      0.82      0.82       268\n\n--------------------------------------------------\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Model:  RandomForestClassifier()\nModel Accuracy:  0.7873134328358209\nModel Confusion Matrix:  [[130  30]\n [ 27  81]] \n\nModel Classification Report:                precision    recall  f1-score   support\n\n         0.0       0.83      0.81      0.82       160\n         1.0       0.73      0.75      0.74       108\n\n    accuracy                           0.79       268\n   macro avg       0.78      0.78      0.78       268\nweighted avg       0.79      0.79      0.79       268\n\n--------------------------------------------------\nModel:  GradientBoostingClassifier()\nModel Accuracy:  0.8246268656716418\nModel Confusion Matrix:  [[144  34]\n [ 13  77]] \n\nModel Classification Report:                precision    recall  f1-score   support\n\n         0.0       0.92      0.81      0.86       178\n         1.0       0.69      0.86      0.77        90\n\n    accuracy                           0.82       268\n   macro avg       0.81      0.83      0.81       268\nweighted avg       0.84      0.82      0.83       268\n\n--------------------------------------------------\nModel:  KNeighborsClassifier()\nModel Accuracy:  0.7126865671641791\nModel Confusion Matrix:  [[130  50]\n [ 27  61]] \n\nModel Classification Report:                precision    recall  f1-score   support\n\n         0.0       0.83      0.72      0.77       180\n         1.0       0.55      0.69      0.61        88\n\n    accuracy                           0.71       268\n   macro avg       0.69      0.71      0.69       268\nweighted avg       0.74      0.71      0.72       268\n\n--------------------------------------------------\nBest Model:  GradientBoostingClassifier()\nBest Model Accuracy:  0.8246268656716418\n                        Model     Score\n0  GradientBoostingClassifier  0.824627\n1          LogisticRegression  0.817164\n2                  GaussianNB  0.794776\n3                 BernoulliNB  0.794776\n4      RandomForestClassifier  0.787313\n5        KNeighborsClassifier  0.712687\n","output_type":"stream"},{"execution_count":221,"output_type":"execute_result","data":{"text/plain":"(GradientBoostingClassifier(),\n 0.8246268656716418,\n array([[130,  50],\n        [ 27,  61]]))"},"metadata":{}}]},{"cell_type":"code","source":"gb=GradientBoostingClassifier()\ngb.fit(x_train,y_train)# Testi kaggle üzeirnden yapacağımız için artık veri setini bölmeden elimizdeki tüm veri setini gönderiyoruz.\ny_pred=gb.predict(x_test)\ny_pred","metadata":{"execution":{"iopub.status.busy":"2024-06-06T18:49:54.965145Z","iopub.execute_input":"2024-06-06T18:49:54.965611Z","iopub.status.idle":"2024-06-06T18:49:55.148434Z","shell.execute_reply.started":"2024-06-06T18:49:54.965560Z","shell.execute_reply":"2024-06-06T18:49:55.147164Z"},"trusted":true},"execution_count":222,"outputs":[{"execution_count":222,"output_type":"execute_result","data":{"text/plain":"array([0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 1., 0., 1., 1., 0.,\n       0., 0., 1., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0.,\n       1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 1., 0.,\n       0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0.,\n       0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.,\n       0., 1., 0., 1., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0.,\n       0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0.,\n       1., 1., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0.,\n       1., 0., 0., 1., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0.,\n       0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1., 0., 1., 0., 1.,\n       0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 0., 1.,\n       0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 1.,\n       0., 1., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,\n       1., 1., 1., 1., 1., 0., 1., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0.,\n       0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,\n       1., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,\n       0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,\n       1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1.,\n       0., 0., 0., 1., 1., 1., 0., 1., 0., 1., 1., 0., 0., 0., 1., 0., 1.,\n       0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0.,\n       1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,\n       1., 1., 0., 0., 1., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,\n       1., 1., 1., 1., 0., 0., 1., 0., 0., 1.])"},"metadata":{}}]},{"cell_type":"code","source":"submission = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_pred.astype(int)})\nsubmission\n","metadata":{"execution":{"iopub.status.busy":"2024-06-06T19:00:10.873111Z","iopub.execute_input":"2024-06-06T19:00:10.873576Z","iopub.status.idle":"2024-06-06T19:00:10.887351Z","shell.execute_reply.started":"2024-06-06T19:00:10.873541Z","shell.execute_reply":"2024-06-06T19:00:10.886059Z"},"trusted":true},"execution_count":226,"outputs":[{"execution_count":226,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived\n0            892         0\n1            893         0\n2            894         0\n3            895         0\n4            896         1\n..           ...       ...\n413         1305         0\n414         1306         1\n415         1307         0\n416         1308         0\n417         1309         1\n\n[418 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>1305</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1306</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>1307</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>1308</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>1309</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"submission.to_csv('submission.csv', index=False) #data frame i csv dosyası olarak kaydediyor","metadata":{"execution":{"iopub.status.busy":"2024-06-06T19:00:13.716088Z","iopub.execute_input":"2024-06-06T19:00:13.717156Z","iopub.status.idle":"2024-06-06T19:00:13.725027Z","shell.execute_reply.started":"2024-06-06T19:00:13.717116Z","shell.execute_reply":"2024-06-06T19:00:13.723677Z"},"trusted":true},"execution_count":227,"outputs":[]},{"cell_type":"code","source":"pd.read_csv","metadata":{"execution":{"iopub.status.busy":"2024-06-06T19:00:14.557370Z","iopub.execute_input":"2024-06-06T19:00:14.557890Z","iopub.status.idle":"2024-06-06T19:00:14.566507Z","shell.execute_reply.started":"2024-06-06T19:00:14.557852Z","shell.execute_reply":"2024-06-06T19:00:14.565112Z"},"trusted":true},"execution_count":228,"outputs":[{"execution_count":228,"output_type":"execute_result","data":{"text/plain":"<function pandas.io.parsers.readers.read_csv(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]', *, sep: 'str | None | lib.NoDefault' = <no_default>, delimiter: 'str | None | lib.NoDefault' = None, header: \"int | Sequence[int] | None | Literal['infer']\" = 'infer', names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>, index_col: 'IndexLabel | Literal[False] | None' = None, usecols: 'UsecolsArgType' = None, dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters: 'Mapping[Hashable, Callable] | None' = None, true_values: 'list | None' = None, false_values: 'list | None' = None, skipinitialspace: 'bool' = False, skiprows: 'list[int] | int | Callable[[Hashable], bool] | None' = None, skipfooter: 'int' = 0, nrows: 'int | None' = None, na_values: 'Hashable | Iterable[Hashable] | Mapping[Hashable, Iterable[Hashable]] | None' = None, keep_default_na: 'bool' = True, na_filter: 'bool' = True, verbose: 'bool | lib.NoDefault' = <no_default>, skip_blank_lines: 'bool' = True, parse_dates: 'bool | Sequence[Hashable] | None' = None, infer_datetime_format: 'bool | lib.NoDefault' = <no_default>, keep_date_col: 'bool | lib.NoDefault' = <no_default>, date_parser: 'Callable | lib.NoDefault' = <no_default>, date_format: 'str | dict[Hashable, str] | None' = None, dayfirst: 'bool' = False, cache_dates: 'bool' = True, iterator: 'bool' = False, chunksize: 'int | None' = None, compression: 'CompressionOptions' = 'infer', thousands: 'str | None' = None, decimal: 'str' = '.', lineterminator: 'str | None' = None, quotechar: 'str' = '\"', quoting: 'int' = 0, doublequote: 'bool' = True, escapechar: 'str | None' = None, comment: 'str | None' = None, encoding: 'str | None' = None, encoding_errors: 'str | None' = 'strict', dialect: 'str | csv.Dialect | None' = None, on_bad_lines: 'str' = 'error', delim_whitespace: 'bool | lib.NoDefault' = <no_default>, low_memory: 'bool' = True, memory_map: 'bool' = False, float_precision: \"Literal['high', 'legacy'] | None\" = None, storage_options: 'StorageOptions | None' = None, dtype_backend: 'DtypeBackend | lib.NoDefault' = <no_default>) -> 'DataFrame | TextFileReader'>"},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\n\n# Örnek DataFrame\ndata = {\n    'Pclass': [1, 2, 3, 1, 3],\n    'Fare': [10.5, 20.0, 30.5, 40.0, 50.5],\n    'Survived': [0, 1, 0, 1, 0]\n}\ndf = pd.DataFrame(data)\n\n# Pclass sütununu object veri tipine çevirme\ndf['Pclass'] = df['Pclass'].astype('object')\n\n# One-hot encoding uygulama\ndf_encoded = pd.get_dummies(df, drop_first=True)\n\nprint(df_encoded)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-06T19:09:57.416589Z","iopub.execute_input":"2024-06-06T19:09:57.417702Z","iopub.status.idle":"2024-06-06T19:09:57.433958Z","shell.execute_reply.started":"2024-06-06T19:09:57.417661Z","shell.execute_reply":"2024-06-06T19:09:57.432340Z"},"trusted":true},"execution_count":232,"outputs":[{"name":"stdout","text":"   Fare  Survived  Pclass_2  Pclass_3\n0  10.5         0     False     False\n1  20.0         1      True     False\n2  30.5         0     False      True\n3  40.0         1     False     False\n4  50.5         0     False      True\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\n\n# Orijinal DataFrame'i alalım (sizin df_train veri setiniz)\n# df_train = ...  # Bu satırı kendi veri setinizle değiştirin\n\n# Pclass sütununu object veri tipine çevirme\nx_train['Pclass'] = x_train['Pclass'].astype('object')\n\n# One-hot encoding uygulama\nx_train_encoded = pd.get_dummies(x_train, drop_first=True)\n\nprint(x_train_encoded.head())\n","metadata":{"execution":{"iopub.status.busy":"2024-06-06T19:12:09.825978Z","iopub.execute_input":"2024-06-06T19:12:09.826853Z","iopub.status.idle":"2024-06-06T19:12:09.847278Z","shell.execute_reply.started":"2024-06-06T19:12:09.826792Z","shell.execute_reply":"2024-06-06T19:12:09.846133Z"},"trusted":true},"execution_count":235,"outputs":[{"name":"stdout","text":"    Age  SibSp  Parch     Fare  Sex_male  Embarked_Q  Embarked_S  Title_Miss  \\\n0  22.0      1      0   7.2500      True       False        True       False   \n1  38.0      1      0  71.2833     False       False       False       False   \n2  26.0      0      0   7.9250     False       False        True        True   \n3  35.0      1      0  53.1000     False       False        True       False   \n4  35.0      0      0   8.0500      True       False        True       False   \n\n   Title_Mr  Title_Mrs  Pclass_2  Pclass_3  \n0      True      False     False      True  \n1     False       True     False     False  \n2     False      False     False      True  \n3     False       True     False     False  \n4      True      False     False      True  \n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_33/3010518539.py:7: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  x_train['Pclass'] = x_train['Pclass'].astype('object')\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}